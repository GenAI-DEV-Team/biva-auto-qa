services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: autoqa-postgres
    environment:
      POSTGRES_DB: autoqa
      POSTGRES_USER: autoqa
      POSTGRES_PASSWORD: autoqa
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U autoqa"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7
    container_name: autoqa-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend:
    image: node:20-alpine
    container_name: autoqa-frontend
    working_dir: /app
    environment:
      VITE_DEV_SERVER_HOST: 0.0.0.0
      VITE_DEV_SERVER_PORT: 8080
      VITE_DEV_API_PROXY_TARGET: http://backend:13886
    ports:
      - "8080:8080"
    depends_on:
      backend:
        condition: service_started
    volumes:
      - ./qa-dialog-compass:/app
      - frontend_node_modules:/app/node_modules
    command: sh -c "npm ci --no-audit --no-fund && npm run dev"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: autoqa-backend
    env_file:
      - ./backend/.env
    ports:
      - "13886:13886"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: sh -c 'uvicorn app.main:app --host 0.0.0.0 --port 13886 --reload --proxy-headers'

  # worker:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: autoqa-worker
  #   environment:
  #     DATABASE_URL: postgresql+psycopg://autoqa:autoqa@postgres:5432/autoqa
  #     REDIS_URL: redis://redis:6379/0
  #     OPENAI_API_KEY: ${OPENAI_API_KEY}
  #     LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY}
  #     LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY}
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./backend:/app
  #   command: celery -A app.workers.tasks worker --loglevel=INFO

volumes:
  pgdata:
  redisdata:
  frontend_node_modules:
